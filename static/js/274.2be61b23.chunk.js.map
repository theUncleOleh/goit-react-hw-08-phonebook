{"version":3,"file":"static/js/274.2be61b23.chunk.js","mappings":"uKACA,MAAwB,2B,SCAT,SAASA,EAAT,GAAgC,IAATC,EAAQ,EAARA,KACpC,OAAO,eAAIC,UAAWC,EAAf,SAAyBF,M,mJCMnB,SAASG,IACtB,OAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA4BF,EAAAA,EAAAA,UAAS,IAArC,eAAOG,EAAP,KAAeC,EAAf,KACMC,GAAWC,EAAAA,EAAAA,IAAYC,EAAAA,EAAAA,qBACvBC,GAAaC,EAAAA,EAAAA,MACXC,GAAcC,EAAAA,EAAAA,MAAdD,UACRE,QAAQC,IAAIH,GACZ,IAAMI,GAAWC,EAAAA,EAAAA,MAsBXC,EAAe,SAAAC,GACnB,MAAwBA,EAAMC,OAAtBjB,EAAR,EAAQA,KAAMkB,EAAd,EAAcA,MACd,OAAQlB,GACN,IAAK,OACHC,EAAQiB,GACR,MACF,IAAK,SACHf,EAAUe,GACV,MACF,QACE,SA4BAC,EAAmB,SAAAjB,GAEvB,IADA,IAAMkB,GAAK,OAAOlB,GACTmB,EAAI,EAAGA,EAAID,EAAME,OAAS,EAAGD,GAAK,EACzCD,EAAMG,OAAOF,EAAG,EAAG,KAErB,OAAOD,EAAMI,KAAK,KAGdC,EAAQ,WACZxB,EAAQ,IACRE,EAAU,KAGZ,OACE,kBAAMuB,SAtCa,SAAAV,GACnBA,EAAMW,iBAKN,IAAMC,EAAYT,EAAiBjB,GAC7B2B,EAAU,CAAE7B,KAAAA,EAAME,OAAQ0B,GAGhCjB,QAAQC,IAAIiB,GAEZ,IAAMC,EAAa1B,EAAS2B,MAAK,qBAAGC,KAAgBvB,KACpDE,QAAQC,IAAI,aAAckB,GAErBA,IAGLjB,EAASoB,EAAAA,EAAAA,eAA+BxB,EAAWoB,IACnDK,EAAAA,GAAAA,QAAA,UAAiBL,EAAQ7B,KAAzB,4BACAO,EAAW,aACXI,QAAQC,IAAI,UAAWiB,GACvBJ,MAgBA,WACE,mBAAOU,QAAQ,GAAf,kBAEE,kBACEC,aAAa,MACbC,KAAK,OACLrC,KAAK,OACLkB,MAAOlB,EACPsC,SAAUvB,EACVwB,QAAQ,yHACRC,MAAM,yIACNC,UAAQ,QAIZ,mBAAON,QAAQ,GAAf,oBAEE,kBACEC,aAAa,MACbC,KAAK,MACLrC,KAAK,SACLkB,MAAOhB,EACPoC,SAAUvB,EACVwB,QAAQ,yFACRC,MAAM,+FACNC,UAAQ,QAGZ,mBAAQJ,KAAK,SAAb,qB,cC9GS,SAASK,IACtB,OACE,iCACE,SAAChD,EAAA,EAAD,CAAaC,KAAK,oBAClB,SAACG,EAAD,S,4FCTA6C,EAAoB,SAAAC,GAAK,OAAIA,EAAMC,OAAO3B,OAChDP,QAAQC,IAAI+B,GACZ,IAIA,EAJkB,CAChBG,oBAL0B,SAAAF,GAAK,OAAIA,EAAMxC,SAASA,UAMlDuC,kBAAAA","sources":["webpack://react-homework-template/./src/components/PageHeading/PageHeading.module.css?b132","components/PageHeading/PageHeading.jsx","components/EditContact/EditContact.jsx","pages/EditContactPage.jsx","redux/contacts/items-selectors.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"title\":\"PageHeading_title__1wPIF\"};","import s from './PageHeading.module.css';\nexport default function PageHeading({ text }) {\n  return <h1 className={s.title}>{text}</h1>;\n}\n","import { useNavigate, useParams } from 'react-router-dom';\nimport { itemsOperations } from 'redux/contacts';\nimport { useState } from 'react';\n// import { useAddUserMutation } from 'redux/contacts/auth-operations';\nimport { itemsSelectors } from 'redux/contacts';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { toast } from 'react-toastify';\n// import Form from 'components/Form/Form';\nexport default function EditContact() {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const contacts = useSelector(itemsSelectors.getContactsSelector);\n  const navigation = useNavigate();\n  const { contactId } = useParams();\n  console.log(contactId);\n  const dispatch = useDispatch();\n  // const addContacts = contact => {\n  //   console.log(contact);\n  //   const toNormalizeName = contact.name.toLocaleLowerCase();\n\n  //   const name = contacts?.find(\n  //     ({ name }) => name.toLocaleLowerCase() === toNormalizeName\n  //   );\n\n  //   // if (name) {\n  //   //   return toast.error(`${contact.name} is already in contacts`);\n  //   // }\n  //   const updateUser = contacts.find(({ id }) => id === contactId);\n  //   console.log('updateUser', updateUser);\n\n  //   if (updateUser) {\n  //     dispatch(itemsOperations.updateContacts(contactId, contact));\n  //     toast.success(`${contact.name} was added to contacts!`);\n  //     navigation('/contacts');\n  //   }\n  // };\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    // const toNormalizeName = name.toLocaleLowerCase();\n    // const name = contacts?.find(\n    //   ({ name }) => name.toLocaleLowerCase() === toNormalizeName\n    // );\n    const formPhone = numberFormatting(number);\n    const contact = { name, number: formPhone };\n\n    // onSubmit(contact);\n    console.log(contact);\n\n    const updateUser = contacts.find(({ id }) => id === contactId);\n    console.log('updateUser', updateUser);\n\n    if (!updateUser) {\n      return;\n    }\n    dispatch(itemsOperations.updateContacts(contactId, contact));\n    toast.success(`${contact.name} was added to contacts!`);\n    navigation('/contacts');\n    console.log('contact', contact);\n    reset();\n  };\n  const numberFormatting = number => {\n    const array = [...number];\n    for (let i = 3; i < array.length - 1; i += 3) {\n      array.splice(i, 0, '-');\n    }\n    return array.join('');\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <label htmlFor=\"\">\n        Name\n        <input\n          autoComplete=\"off\"\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          onChange={handleChange}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n      </label>\n\n      <label htmlFor=\"\">\n        Number\n        <input\n          autoComplete=\"off\"\n          type=\"tel\"\n          name=\"number\"\n          value={number}\n          onChange={handleChange}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n      </label>\n      <button type=\"submit\">Edit</button>\n    </form>\n  );\n}\n","// import { useEffect } from 'react';\n// import { useDispatch } from 'react-redux';\n// import { useParams } from 'react-router-dom';\n// import { itemsOperations } from 'redux/contacts';\nimport EditContact from 'components/EditContact';\nimport PageHeading from 'components/PageHeading';\n\nexport default function EditContactPage() {\n  return (\n    <>\n      <PageHeading text=\"Create contact\" />\n      <EditContact />\n    </>\n  );\n}\n","const getContactsSelector = state => state.contacts.contacts;\n\nconst getFilterSelector = state => state.filter.value;\nconsole.log(getFilterSelector);\nconst selectors = {\n  getContactsSelector,\n  getFilterSelector,\n};\nexport default selectors;\n"],"names":["PageHeading","text","className","s","EditContact","useState","name","setName","number","setNumber","contacts","useSelector","itemsSelectors","navigation","useNavigate","contactId","useParams","console","log","dispatch","useDispatch","handleChange","event","target","value","numberFormatting","array","i","length","splice","join","reset","onSubmit","preventDefault","formPhone","contact","updateUser","find","id","itemsOperations","toast","htmlFor","autoComplete","type","onChange","pattern","title","required","EditContactPage","getFilterSelector","state","filter","getContactsSelector"],"sourceRoot":""}