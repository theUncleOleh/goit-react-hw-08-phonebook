{"version":3,"file":"static/js/573.bd5abecb.chunk.js","mappings":"uKACA,MAAwB,2B,SCAT,SAASA,EAAT,GAAgC,IAATC,EAAQ,EAARA,KACpC,OAAO,eAAIC,UAAWC,EAAf,SAAyBF,M,sHCDlC,GAAgB,MAAQ,2BAA2B,KAAO,2B,uCCA1D,EAAuB,8BAAvB,EAA4D,8B,mBCQ7C,SAASG,EAAT,GAAgD,IAArBC,EAAoB,EAApBA,GAAIC,EAAgB,EAAhBA,KAAMC,EAAU,EAAVA,OAC5CC,GAAWC,EAAAA,EAAAA,MAMjB,OACE,+BACE,gBAAIP,UAAWC,EAAf,WACE,kBAAMD,UAAWC,EAAjB,WACE,SAAC,MAAD,IACCG,MAEH,mCACA,kBAAMJ,UAAWC,EAAjB,WACE,SAAC,MAAD,IADF,IACeI,MAEf,SAACG,EAAA,EAAD,CAAQC,KAAK,SAASC,QAAS,kBAfd,SAAAP,GACrBQ,QAAQC,IAAIT,GACZG,EAASO,EAAAA,EAAAA,eAA+BV,IAaCW,CAAeX,IAApD,yBCZO,SAASY,IACtB,IAAMT,GAAWC,EAAAA,EAAAA,OAEjBS,EAAAA,EAAAA,YAAU,WACRV,EAASO,EAAAA,EAAAA,cACR,CAACP,IAEJ,IAAMW,GAAWC,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMF,SAASA,YACrD,GAAwBG,EAAAA,EAAAA,UAAS,IAAjC,eAAOhB,EAAP,KAAaiB,EAAb,KACA,GAA4BD,EAAAA,EAAAA,UAAS,IAArC,eAAOf,EAAP,KAAeiB,EAAf,KAEMC,EAAe,SAAAC,GACnB,MAAwBA,EAAMC,OAAtBrB,EAAR,EAAQA,KAAMsB,EAAd,EAAcA,MACd,OAAQtB,GACN,IAAK,OACHiB,EAAQK,GACR,MACF,IAAK,SACHJ,EAAUI,GACV,MAEF,QACE,SAaAC,EAAmB,SAAAtB,GAEvB,IADA,IAAMuB,GAAK,OAAOvB,GACTwB,EAAI,EAAGA,EAAID,EAAME,OAAS,EAAGD,GAAK,EACzCD,EAAMG,OAAOF,EAAG,EAAG,KAErB,OAAOD,EAAMI,KAAK,KAGdC,EAAQ,WACZZ,EAAQ,IACRC,EAAU,KAkBZ,OACE,UAAC,EAAAY,SAAD,YAsBE,kBAAMC,SA5DW,SAAAX,GACnBA,EAAMY,iBACN,IAAMC,EAAaV,EAAiBtB,GAC9BiC,EAAO,CAAElC,KAAAA,EAAMC,OAAQgC,GAC7B1B,QAAQC,IAAI0B,GACZhC,EAASO,EAAAA,EAAAA,YAA4ByB,IAErCL,KAqDgCjC,UAAWC,EAAAA,KAAzC,WACE,mBAAOsC,QAAQ,GAAGvC,UAAWC,EAAAA,MAA7B,kBAEE,kBACEuC,aAAa,MACbxC,UAAWC,EAAAA,MACXQ,KAAK,OACLL,KAAK,OACLsB,MAAOtB,EACPqC,SAAUlB,EACVmB,QAAQ,yHACRC,MAAM,yIACNC,UAAQ,QAIZ,mBAAOL,QAAQ,GAAGvC,UAAWC,EAAAA,MAA7B,oBAEE,kBACEuC,aAAa,MACbxC,UAAWC,EAAAA,MACXQ,KAAK,MACLL,KAAK,SACLsB,MAAOrB,EACPoC,SAAUlB,QAKd,SAACf,EAAA,EAAD,CAAQC,KAAK,SAAb,wBAEF,eAAIT,UAAWC,EAAAA,KAAf,gBACGgB,QADH,IACGA,OADH,EACGA,EAAU4B,KAAI,SAAAC,GAAO,OAOpB,SAAC5C,EAAD,CAEEC,GAAI2C,EAAQ3C,GACZC,KAAM0C,EAAQ1C,KACdC,OAAQyC,EAAQzC,QAHXyC,EAAQ3C,UAQnB,SAAC,KAAD,OCnJS,SAAS4C,IACtB,OACE,iCACE,SAACjD,EAAA,EAAD,CAAaC,KAAK,cAClB,SAACgB,EAAD","sources":["webpack://react-homework-template/./src/components/PageHeading/PageHeading.module.css?b132","components/PageHeading/PageHeading.jsx","webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","webpack://react-homework-template/./src/components/ContactListItem/ContactListItem.module.css?7127","components/ContactListItem/ContactListItem.jsx","components/ContactList/ContactList.jsx","pages/UserContacts.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"title\":\"PageHeading_title__1wPIF\"};","import s from './PageHeading.module.css';\nexport default function PageHeading({ text }) {\n  return <h1 className={s.title}>{text}</h1>;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"title\":\"ContactList_title__gpugJ\",\"list\":\"ContactList_list__csErn\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"ContactListItem_item__UAAix\",\"graf\":\"ContactListItem_graf__nKxW+\",\"button\":\"ContactListItem_button__SG6H2\"};","// import ScaleLoader from 'react-spinners/ScaleLoader';\nimport { FiUser, FiPhone } from 'react-icons/fi';\n\nimport { useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport Button from 'react-bootstrap/Button';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport s from './ContactListItem.module.css';\nimport { itemsOperations } from 'redux/contacts';\nexport default function ContactListItem({ id, name, number }) {\n  const dispatch = useDispatch();\n\n  const deleteListItem = id => {\n    console.log(id);\n    dispatch(itemsOperations.deleteContacts(id));\n  };\n  return (\n    <>\n      <li className={s.item}>\n        <span className={s.graf}>\n          <FiUser />\n          {name}\n        </span>\n        <span> : </span>\n        <span className={s.graf}>\n          <FiPhone /> {number}\n        </span>\n        <Button type=\"button\" onClick={() => deleteListItem(id)}>\n          Delete\n        </Button>\n        {/* <button => \n          type=\"button\"\n        \n          className={s.button}\n         \n        >\n          {isDeliting ? (\n            <ScaleLoader height={15} width={5} margin={2} />\n          ) : (\n            'Delete'\n          )}\n        </button> */}\n      </li>\n    </>\n  );\n}\n\nContactListItem.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      phone: PropTypes.string.isRequired,\n    })\n  ),\n};\n","import React, { Fragment } from 'react';\nimport { useEffect, useState } from 'react';\nimport { ToastContainer } from 'react-toastify';\nimport s from './ContactList.module.css';\nimport { useSelector } from 'react-redux';\nimport Button from 'react-bootstrap/Button';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n// import { itemsSelectors } from 'redux/contacts';\nimport ContactListItem from 'components/ContactListItem/ContactListItem';\n// import { useGetAllContactsQuery } from 'redux/contacts/auth-operations';\n// import Loader from 'components/Loader';\nimport { useDispatch } from 'react-redux';\nimport { itemsOperations } from 'redux/contacts';\n// import Filter from 'components/Filter';\n\nexport default function ContactList() {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(itemsOperations.contacts());\n  }, [dispatch]);\n\n  const contacts = useSelector(state => state.contacts.contacts);\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    const formNumber = numberFormatting(number);\n    const user = { name, number: formNumber };\n    console.log(user);\n    dispatch(itemsOperations.addContacts(user));\n    // onSubmit(user);\n    reset();\n  };\n  const numberFormatting = number => {\n    const array = [...number];\n    for (let i = 3; i < array.length - 1; i += 3) {\n      array.splice(i, 0, '-');\n    }\n    return array.join('');\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n  // const deleteListItem = id => {\n  //   console.log(id);\n  //   dispatch(itemsOperations.deleteContacts(id));\n  //   // toast.success(`Contact ${name} successfuly delete`);\n  // };\n\n  // const filter = useSelector(state => state.filter.value);\n  // const getVisibleContacts = () => {\n  //   const normalizeFilter = filter.toLowerCase();\n  //   return contacts?.filter(({ name }) =>\n  //     name.toLowerCase().includes(normalizeFilter)\n  //   );\n  // };\n  // const getVisibleContacts = createSelector([]);\n  // const visibleContacts = getVisibleContacts();\n\n  return (\n    <Fragment>\n      {/* <Filter />\n      <h2 className={s.title}>Contacts</h2>\n      {error ? (\n        <>Oh no, there was an error</>\n      ) : isLoading ? (\n        <>{<Loader />}</>\n      ) : contacts ? (\n        <>\n          <ul className={s.list}>\n            {visibleContacts.map(contact => (\n              <ContactListItem\n                key={contact.id}\n                id={contact.id}\n                name={contact.name}\n                phone={contact.phone}\n              />\n\n            ))}\n          </ul>\n        </>\n      ) : null} */}\n      <form onSubmit={handleSubmit} className={s.form}>\n        <label htmlFor=\"\" className={s.label}>\n          Name\n          <input\n            autoComplete=\"off\"\n            className={s.input}\n            type=\"text\"\n            name=\"name\"\n            value={name}\n            onChange={handleChange}\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n          />\n        </label>\n\n        <label htmlFor=\"\" className={s.label}>\n          Number\n          <input\n            autoComplete=\"off\"\n            className={s.input}\n            type=\"tel\"\n            name=\"number\"\n            value={number}\n            onChange={handleChange}\n            // pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            // title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          />\n        </label>\n        <Button type=\"submit\">Create</Button>\n      </form>\n      <ul className={s.list}>\n        {contacts?.map(contact => (\n          // <li key={contact.id}>\n          //   <span>{contact.name}</span> : <span>{contact.number}</span>\n          //   <button type=\"button\" onClick={() => deleteListItem(contact.id)}>\n          //     Delete\n          //   </button>\n          // </li>\n          <ContactListItem\n            key={contact.id}\n            id={contact.id}\n            name={contact.name}\n            number={contact.number}\n          />\n        ))}\n      </ul>\n\n      <ToastContainer />\n    </Fragment>\n  );\n}\n","import PageHeading from 'components/PageHeading';\nimport ContactList from 'components/ContactList';\nexport default function UserContacts() {\n  return (\n    <>\n      <PageHeading text=\"Contacts\" />\n      <ContactList />\n    </>\n  );\n}\n"],"names":["PageHeading","text","className","s","ContactListItem","id","name","number","dispatch","useDispatch","Button","type","onClick","console","log","itemsOperations","deleteListItem","ContactList","useEffect","contacts","useSelector","state","useState","setName","setNumber","handleChange","event","target","value","numberFormatting","array","i","length","splice","join","reset","Fragment","onSubmit","preventDefault","formNumber","user","htmlFor","autoComplete","onChange","pattern","title","required","map","contact","UserContacts"],"sourceRoot":""}